[project]
name = "scimaiagent"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "openinference-instrumentation-smolagents>=0.1.2",
    "opentelemetry-exporter-otlp>=1.29.0",
    "opentelemetry-sdk>=1.29.0",
    "psycopg2-binary>=2.9.10",
    "pydantic>=2.10.6",
    "pytest>=8.3.4",
    "python-dotenv>=1.0.1",
    "scimaiagentsconnectionsql",
    "scimaiagentsserver",
    "scimaicommon",
    "scimaitools",
    "smolagents>=1.7.0",
    "sqlalchemy>=2.0.37",
]

[tool.uv.workspace]
members = [
    "libraries/agents/connection/sql", 
    "libraries/agents/server", 
    "libraries/common", 
    "libraries/tools"
]

[tool.uv.sources]
scimaiagent = { workspace = true }
scimaiagentsconnectionsql = { workspace = true }
scimaiagentsserver = { workspace = true }
scimaicommon = { workspace = true }
scimaitools = { workspace = true }

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/agent"]


[tool.ruff.lint]
select = ["ALL"]
ignore = ["D100"]

[tool.ruff]
line-length = 120

[tool.ruff.lint.extend-per-file-ignores]
"**/tests/**/*.py" = [
    # at least this three should be fine in tests:
    "S101", # asserts allowed in tests...
    "ARG", # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "D100", # Don't care about module comments
    "D103",
    # The below are debateable
    "PLR2004", # Magic value used in comparison, ...
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
]
"**/__init__.py" = [
    "D100",
]